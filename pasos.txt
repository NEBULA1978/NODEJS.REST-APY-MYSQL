next@rases:~/Música/NODEJS-REST-API-MYSQL$ npm init -yST-API-MYSQL$
Wrote to /home/next/Música/NODEJS-REST-API-MYSQL/package.json:

{
  "name": "nodejs-rest-api-mysql",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}


next@rases:~/Música/NODEJS-REST-API-MYSQL$

/////////////////////////////////////////////////////////////////

next@rases:~/Música/NODEJS-REST-API-MYSQL$ npm i express

added 57 packages, and audited 58 packages in 11s

7 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
next@rases:~/Música/NODEJS-REST-API-MYSQL$ 

/////////////////////////////////////////////////////////////////

Modifico package.json para poder utilizar modulos express:

{
  "name": "nodejs-rest-api-mysql",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2"
  }
}

/////////////////////////////////////////////////////////////////

Archivo index.js:

import express from 'express'

// METODO antiguo
// const express = require('express')

const app = express()

app.listen(3000)

next@rases:~/Música/NODEJS-REST-API-MYSQL$ node index.js 
Ejecutamos servidor basico en el puerto 3000
localhost://3000

Nos devuelve:
Cannot GET /

/////////////////////////////////////////////////////////////////

Intalamos nodemom como dependencia de desarrollo:

next@rases:~/Música/NODEJS-REST-API-MYSQL$ npm i nodemon -D

added 32 packages, and audited 90 packages in 12s

10 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
next@rases:~/Música/NODEJS-REST-API-MYSQL$


 /////////////////////////////////////////////////////////////////
Modifico package.json para utilizar nodemon:

{
  "name": "nodejs-rest-api-mysql",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "dev": "nodemon index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}

Para ejecutar:

next@rases:~/Música/NODEJS-REST-API-MYSQL$ npm run dev

> nodejs-rest-api-mysql@1.0.0 dev
> nodemon index.js

[nodemon] 2.0.22
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node index.js`


 /////////////////////////////////////////////////////////////////

Añado enpoints a archivo index.js:

import express from 'express'
// METODO antiguo
// const express = require('express')

const app = express()

// Enpoins o Middelwers

Utilizo Thunder Client para poder probar post,put,delete:
// Para ver en web:
// http://localhost:3000/employees
app.get('/employees', (req,res) => res.end('obteniendo empleados'))

app.post('/employees', (req,res) => res.end('creando empleados'))

app.put('/employees', (req,res) => res.end('actualizando empleados'))

app.delete('/employees', (req,res) => res.end('eliminando empleados'))


app.listen(3000)
console.log('Server runnig on port 3000')

// Para ejecutar servidor:
// npm run dev
/////////////////////////////////////////////////////////////////
CONEXION mysql:

next@rases:~$ sudo su
root@rases:/home/next# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 32
Server version: 10.6.12-MariaDB-0ubuntu0.22.04.1 Ubuntu 22.04

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> show database
    -> Ctrl-C -- exit!
Aborted
root@rases:/home/next# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 33
Server version: 10.6.12-MariaDB-0ubuntu0.22.04.1 Ubuntu 22.04

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0,001 sec)

MariaDB [(none)]> CREATE DATABASE IF NOT EXISTS companydb
    -> ;
Query OK, 1 row affected (0,000 sec)

MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| companydb          |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0,000 sec)

MariaDB [(none)]> use companydb
Database changed
MariaDB [companydb]> CREATE TABLE employee (
    ->   id INT(11) NOT NULL AUTO_INCREMENT,
    ->   name VARCHAR(45) DEFAULT NULL,
    ->   salary INT(11) DEFAULT NULL, 
    ->   PRIMARY KEY(id)
    -> );
Query OK, 0 rows affected (0,022 sec)

MariaDB [companydb]> show tables;
+---------------------+
| Tables_in_companydb |
+---------------------+
| employee            |
+---------------------+
1 row in set (0,000 sec)

MariaDB [companydb]> describe employee;
+--------+-------------+------+-----+---------+----------------+
| Field  | Type        | Null | Key | Default | Extra          |
+--------+-------------+------+-----+---------+----------------+
| id     | int(11)     | NO   | PRI | NULL    | auto_increment |
| name   | varchar(45) | YES  |     | NULL    |                |
| salary | int(11)     | YES  |     | NULL    |                |
+--------+-------------+------+-----+---------+----------------+
3 rows in set (0,001 sec)

MariaDB [companydb]> 

/////////////////////////////////////////////////////////////////

next@rases:~/Música/NODEJS-REST-API-MYSQL$ npm i mysql2

added 11 packages, and audited 101 packages in 10s

10 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
next@rases:~/Música/NODEJS-REST-API-MYSQL$ 

/////////////////////////////////////////////////////////////////

Creamos archivo de conexion:
db.js:

import { createPool } from "mysql2/promise";

export const pool = createPool({
    host: 'localhost',
    user: 'root',
    pasword: '',
    dabase: 'companydb'
})
/////////////////////////////////////////////////////////////////

Modificamos archivo index.js:
Añado:
app.get('/ping',(req, res) => res.send('pong));
